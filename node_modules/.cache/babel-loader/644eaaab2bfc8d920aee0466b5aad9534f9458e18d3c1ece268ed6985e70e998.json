{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Escritorio\\\\TrucoFront\\\\src\\\\privateRoute\\\\index.js\",\n  _s = $RefreshSig$();\n// src/privateRoute.js\n\nimport React, { useState, useEffect } from 'react';\nimport tokenService from '../services/token.service';\nimport Login from '../auth/login';\n\n// We'll import the TheaterTransition component\nimport TheaterTransition from '../TheaterTransition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isValid, setIsValid] = useState(false);\n  const [message, setMessage] = useState(null);\n  const jwt = tokenService.getLocalAccessToken();\n\n  // Validate token on mount\n  useEffect(() => {\n    if (!jwt) {\n      // No token => not valid => show Login\n      setIsValid(false);\n      setIsLoading(false);\n    } else {\n      // Validate by calling your backend\n      fetch(`https://trucobeasts-e0dxg3dvccd5dvb5.centralus-01.azurewebsites.net/api/v1/auth/validate?token=${jwt}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(result => {\n        setIsValid(result);\n        setIsLoading(false);\n        if (!result) {\n          setMessage('Your token has expired. Please, sign in again.');\n        }\n      }).catch(() => {\n        setIsValid(false);\n        setIsLoading(false);\n        setMessage('Error verifying token. Please, sign in again.');\n      });\n    }\n  }, [jwt]);\n\n  // Decide what to render behind the curtains\n  let content;\n  if (isLoading) {\n    // Still loading => show a \"Loading...\" screen\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white',\n        fontSize: '40px',\n        marginTop: '40vh',\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  } else if (isValid) {\n    // Token valid => show protected content\n    content = children;\n  } else {\n    // Token invalid => show Login + message\n    content = /*#__PURE__*/_jsxDEV(Login, {\n      message: message,\n      navigation: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }, this);\n  }\n\n  // The curtains open only after loading is done\n  const openWhen = !isLoading;\n  return /*#__PURE__*/_jsxDEV(TheaterTransition, {\n    openWhen: openWhen,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(PrivateRoute, \"t4Us5RgKMAaZnapJzFF/XWh0kYM=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useState","useEffect","tokenService","Login","TheaterTransition","jsxDEV","_jsxDEV","PrivateRoute","children","_s","isLoading","setIsLoading","isValid","setIsValid","message","setMessage","jwt","getLocalAccessToken","fetch","method","headers","then","response","json","result","catch","content","style","color","fontSize","marginTop","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","navigation","openWhen","_c","$RefreshReg$"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/privateRoute/index.js"],"sourcesContent":["// src/privateRoute.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport tokenService from '../services/token.service';\r\nimport Login from '../auth/login';\r\n\r\n// We'll import the TheaterTransition component\r\nimport TheaterTransition from '../TheaterTransition';\r\n\r\nconst PrivateRoute = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const jwt = tokenService.getLocalAccessToken();\r\n\r\n  // Validate token on mount\r\n  useEffect(() => {\r\n    if (!jwt) {\r\n      // No token => not valid => show Login\r\n      setIsValid(false);\r\n      setIsLoading(false);\r\n    } else {\r\n      // Validate by calling your backend\r\n      fetch(`https://trucobeasts-e0dxg3dvccd5dvb5.centralus-01.azurewebsites.net/api/v1/auth/validate?token=${jwt}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n          setIsValid(result);\r\n          setIsLoading(false);\r\n\r\n          if (!result) {\r\n            setMessage('Your token has expired. Please, sign in again.');\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setIsValid(false);\r\n          setIsLoading(false);\r\n          setMessage('Error verifying token. Please, sign in again.');\r\n        });\r\n    }\r\n  }, [jwt]);\r\n\r\n  // Decide what to render behind the curtains\r\n  let content;\r\n  if (isLoading) {\r\n    // Still loading => show a \"Loading...\" screen\r\n    content = (\r\n      <div\r\n        style={{\r\n          color: 'white',\r\n          fontSize: '40px',\r\n          marginTop: '40vh',\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        Loading...\r\n      </div>\r\n    );\r\n  } else if (isValid) {\r\n    // Token valid => show protected content\r\n    content = children;\r\n  } else {\r\n    // Token invalid => show Login + message\r\n    content = <Login message={message} navigation={true} />;\r\n  }\r\n\r\n  // The curtains open only after loading is done\r\n  const openWhen = !isLoading;\r\n\r\n  return (\r\n    <TheaterTransition openWhen={openWhen}>\r\n      {content}\r\n    </TheaterTransition>\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,eAAe;;AAEjC;AACA,OAAOC,iBAAiB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMgB,GAAG,GAAGd,YAAY,CAACe,mBAAmB,CAAC,CAAC;;EAE9C;EACAhB,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,GAAG,EAAE;MACR;MACAH,UAAU,CAAC,KAAK,CAAC;MACjBF,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACL;MACAO,KAAK,CAAC,kGAAkGF,GAAG,EAAE,EAAE;QAC7GG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QAClB;MACF,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,MAAM,IAAK;QAChBX,UAAU,CAACW,MAAM,CAAC;QAClBb,YAAY,CAAC,KAAK,CAAC;QAEnB,IAAI,CAACa,MAAM,EAAE;UACXT,UAAU,CAAC,gDAAgD,CAAC;QAC9D;MACF,CAAC,CAAC,CACDU,KAAK,CAAC,MAAM;QACXZ,UAAU,CAAC,KAAK,CAAC;QACjBF,YAAY,CAAC,KAAK,CAAC;QACnBI,UAAU,CAAC,+CAA+C,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACC,GAAG,CAAC,CAAC;;EAET;EACA,IAAIU,OAAO;EACX,IAAIhB,SAAS,EAAE;IACb;IACAgB,OAAO,gBACLpB,OAAA;MACEqB,KAAK,EAAE;QACLC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE,MAAM;QACjBC,SAAS,EAAE;MACb,CAAE;MAAAvB,QAAA,EACH;IAED;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN;EACH,CAAC,MAAM,IAAIvB,OAAO,EAAE;IAClB;IACAc,OAAO,GAAGlB,QAAQ;EACpB,CAAC,MAAM;IACL;IACAkB,OAAO,gBAAGpB,OAAA,CAACH,KAAK;MAACW,OAAO,EAAEA,OAAQ;MAACsB,UAAU,EAAE;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzD;;EAEA;EACA,MAAME,QAAQ,GAAG,CAAC3B,SAAS;EAE3B,oBACEJ,OAAA,CAACF,iBAAiB;IAACiC,QAAQ,EAAEA,QAAS;IAAA7B,QAAA,EACnCkB;EAAO;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAExB,CAAC;AAAC1B,EAAA,CAvEIF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAyElB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}