{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Escritorio\\\\TrucoFront\\\\src\\\\util\\\\getErrorModal.js\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport React, { useState } from 'react';\n/**\r\n * Toggles the visibility state of a modal.\r\n *\r\n * @param {function} setVisible - Function to update the visibility state.\r\n * @param {boolean} visible - The current visibility state of the modal.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction handleVisible(setVisible, visible) {\n  setVisible(!visible);\n}\n/**\r\n * Function to render an error modal with a given message.\r\n * The modal includes a close button and a footer button to dismiss the modal.\r\n *\r\n * @param {function} setVisible - Function to update the visibility state of the modal.\r\n * @param {boolean} [visible=false] - The initial visibility state of the modal. Defaults to `false`.\r\n * @param {string|null} [message=null] - The message to display inside the modal. If no message is provided, the modal is not rendered.\r\n * \r\n * @returns {JSX.Element} - Returns the modal component if a message is provided; otherwise, returns an empty fragment.\r\n *\r\n * @example\r\n * const [visible, setVisible] = useState(false);\r\n * const modal = getErrorModal(setVisible, visible, \"An error occurred!\");\r\n */\nexport default function getErrorModal(setVisible, visible = false, message = null) {\n  function getGifMono() {\n    const gifsLink = [\"https://media1.tenor.com/m/BbeN4otDs4cAAAAd/dying-dead.gif\", \"https://c.tenor.com/vkvU9Fi4uOsAAAAC/tenor.gif\", \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ2cwcHF4azI0dWZkaHFieW9ybXc2bzN0M2VmcTU0Y3BzbnJvazFkcCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/HBt1lszlxqZ5XBfF14/giphy.webp\"];\n    const randomIndex = Math.floor(Math.random() * gifsLink.length);\n    return gifsLink[randomIndex];\n  }\n  if (message) {\n    const closeBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close\",\n      onClick: () => handleVisible(setVisible, visible),\n      type: \"button\",\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: visible,\n        toggle: () => handleVisible(setVisible, visible),\n        keyboard: false,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: () => handleVisible(setVisible, visible),\n          close: closeBtn,\n          children: \"Alert!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: getGifMono(),\n            alt: \"Mono GIF\",\n            style: {\n              width: '100%',\n              height: 'auto',\n              marginBottom: '20px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this), message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: () => handleVisible(setVisible, visible),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}","map":{"version":3,"names":["Button","Modal","ModalBody","ModalFooter","ModalHeader","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","handleVisible","setVisible","visible","getErrorModal","message","getGifMono","gifsLink","randomIndex","Math","floor","random","length","closeBtn","className","onClick","type","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","toggle","keyboard","close","src","alt","style","width","height","marginBottom","color"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/util/getErrorModal.js"],"sourcesContent":["import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport React, { useState } from 'react';\r\n/**\r\n * Toggles the visibility state of a modal.\r\n *\r\n * @param {function} setVisible - Function to update the visibility state.\r\n * @param {boolean} visible - The current visibility state of the modal.\r\n */\r\nfunction handleVisible(setVisible, visible) {\r\n    setVisible(!visible);\r\n}\r\n/**\r\n * Function to render an error modal with a given message.\r\n * The modal includes a close button and a footer button to dismiss the modal.\r\n *\r\n * @param {function} setVisible - Function to update the visibility state of the modal.\r\n * @param {boolean} [visible=false] - The initial visibility state of the modal. Defaults to `false`.\r\n * @param {string|null} [message=null] - The message to display inside the modal. If no message is provided, the modal is not rendered.\r\n * \r\n * @returns {JSX.Element} - Returns the modal component if a message is provided; otherwise, returns an empty fragment.\r\n *\r\n * @example\r\n * const [visible, setVisible] = useState(false);\r\n * const modal = getErrorModal(setVisible, visible, \"An error occurred!\");\r\n */\r\nexport default function getErrorModal(setVisible, visible = false, message = null) {\r\n\r\n    function getGifMono(){\r\n        const gifsLink=[\"https://media1.tenor.com/m/BbeN4otDs4cAAAAd/dying-dead.gif\",\r\n            \"https://c.tenor.com/vkvU9Fi4uOsAAAAC/tenor.gif\",\r\n            \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ2cwcHF4azI0dWZkaHFieW9ybXc2bzN0M2VmcTU0Y3BzbnJvazFkcCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/HBt1lszlxqZ5XBfF14/giphy.webp\"\r\n        ];\r\n        const randomIndex = Math.floor(Math.random() * gifsLink.length)\r\n        return(gifsLink[randomIndex])\r\n\r\n    }\r\n\r\n    if (message) {\r\n        const closeBtn = (\r\n            <button className=\"close\" onClick={() => handleVisible(setVisible, visible)} type=\"button\">\r\n                &times;\r\n            </button>\r\n        );\r\n        return (\r\n            <div>\r\n                <Modal isOpen={visible} toggle={() => handleVisible(setVisible, visible)}\r\n                    keyboard={false}>\r\n                    <ModalHeader toggle={() => handleVisible(setVisible, visible)} close={closeBtn}>Alert!</ModalHeader>\r\n                    <ModalBody>\r\n                    <img src={getGifMono()} alt=\"Mono GIF\" style={{ width: '100%', height: 'auto', marginBottom: '20px' }} />\r\n                        {message}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={() => handleVisible(setVisible, visible)}>Close</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    } else\r\n        return <></>;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}