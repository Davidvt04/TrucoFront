{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\n\n/**\r\n * Custom React hook to fetch data from a given URL and manage the fetched data within state.\r\n * This hook supports JWT-based authentication, message handling, and conditional fetching.\r\n *\r\n * @param {any} initial - The initial value for the `data` state.\r\n * @param {string} url - The URL from which to fetch the data. If not provided, the fetch request will not be initiated.\r\n * @param {string|null} jwt - The JSON Web Token (JWT) for authorization. If provided, the token will be included in the request headers.\r\n * @param {function|null} setMessage - Function to update the message state based on the server's response. If `null`, alerts will be used instead.\r\n * @param {function} setVisible - Function to control the visibility of the message or alert.\r\n * @param {string|null} [id=null] - Optional parameter to control fetch behavior. If `id` is `\"new\"`, the fetch request is skipped.\r\n * \r\n * @returns {[any, function]} - Returns an array with two elements:\r\n *   - `data`: The state variable holding the fetched data.\r\n *   - `setData`: A function to manually update the `data` state.\r\n *\r\n * @example\r\n * const [data, setData] = useFetchState({}, 'https://api.example.com/data', jwtToken, setMessage, setVisible);\r\n */\n\nexport default function useFetchState(initial, url, jwt, setMessage, setVisible, id = null) {\n  _s();\n  const [data, setData] = useState(initial);\n  useEffect(() => {\n    if (url) {\n      if (!id || id !== \"new\") {\n        let ignore = false;\n        fetch(url, jwt ? {\n          headers: {\n            \"Authorization\": `Bearer ${jwt}`\n          }\n        } : {}).then(response => response.json()).then(json => {\n          if (!ignore) {\n            if (json.message) {\n              if (setMessage !== null) {\n                setMessage(json.message);\n                setVisible(true);\n              } else window.alert(json.message);\n            } else {\n              setData(json);\n            }\n          }\n        }).catch(message => {\n          console.log(message);\n          setMessage('Failed to fetch data');\n          setVisible(true);\n        });\n        return () => {\n          ignore = true;\n        };\n      }\n    }\n  }, [url, id, jwt, setMessage, setVisible]);\n  return [data, setData];\n}\n_s(useFetchState, \"9UhLF4YeOibI08tUwqrXKngUH6A=\");","map":{"version":3,"names":["useEffect","useState","useFetchState","initial","url","jwt","setMessage","setVisible","id","_s","data","setData","ignore","fetch","headers","then","response","json","message","window","alert","catch","console","log"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/util/useFetchState.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n\r\n/**\r\n * Custom React hook to fetch data from a given URL and manage the fetched data within state.\r\n * This hook supports JWT-based authentication, message handling, and conditional fetching.\r\n *\r\n * @param {any} initial - The initial value for the `data` state.\r\n * @param {string} url - The URL from which to fetch the data. If not provided, the fetch request will not be initiated.\r\n * @param {string|null} jwt - The JSON Web Token (JWT) for authorization. If provided, the token will be included in the request headers.\r\n * @param {function|null} setMessage - Function to update the message state based on the server's response. If `null`, alerts will be used instead.\r\n * @param {function} setVisible - Function to control the visibility of the message or alert.\r\n * @param {string|null} [id=null] - Optional parameter to control fetch behavior. If `id` is `\"new\"`, the fetch request is skipped.\r\n * \r\n * @returns {[any, function]} - Returns an array with two elements:\r\n *   - `data`: The state variable holding the fetched data.\r\n *   - `setData`: A function to manually update the `data` state.\r\n *\r\n * @example\r\n * const [data, setData] = useFetchState({}, 'https://api.example.com/data', jwtToken, setMessage, setVisible);\r\n */\r\n\r\nexport default function useFetchState(initial, url, jwt, setMessage, setVisible, id = null) {\r\n    const [data, setData] = useState(initial);\r\n    useEffect(() => {\r\n        if (url) {\r\n            if (!id || id !== \"new\") {\r\n                let ignore = false;\r\n                fetch(url, jwt?{\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${jwt}`,\r\n                    },\r\n                }:{})\r\n                    .then(response => response.json())\r\n                    .then(json => {\r\n                        if (!ignore) {\r\n                            if (json.message) {\r\n                                if(setMessage!==null){\r\n                                    setMessage(json.message);\r\n                                    setVisible(true);\r\n                                }else\r\n                                    window.alert(json.message);\r\n                            }\r\n                            else {\r\n                                setData(json);\r\n                            }\r\n                        }\r\n                    }).catch((message) => {\r\n                        console.log(message);\r\n                        setMessage('Failed to fetch data');\r\n                        setVisible(true);\r\n                    });\r\n                return () => {\r\n                    ignore = true;\r\n                };\r\n            }\r\n\r\n        }\r\n    }, [url, id, jwt, setMessage, setVisible]);\r\n    return [data, setData];\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAG3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAaA,CAACC,OAAO,EAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAEC,UAAU,EAAEC,EAAE,GAAG,IAAI,EAAE;EAAAC,EAAA;EACxF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACE,OAAO,CAAC;EACzCH,SAAS,CAAC,MAAM;IACZ,IAAII,GAAG,EAAE;MACL,IAAI,CAACI,EAAE,IAAIA,EAAE,KAAK,KAAK,EAAE;QACrB,IAAII,MAAM,GAAG,KAAK;QAClBC,KAAK,CAACT,GAAG,EAAEC,GAAG,GAAC;UACXS,OAAO,EAAE;YACL,eAAe,EAAE,UAAUT,GAAG;UAClC;QACJ,CAAC,GAAC,CAAC,CAAC,CAAC,CACAU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAI;UACV,IAAI,CAACL,MAAM,EAAE;YACT,IAAIK,IAAI,CAACC,OAAO,EAAE;cACd,IAAGZ,UAAU,KAAG,IAAI,EAAC;gBACjBA,UAAU,CAACW,IAAI,CAACC,OAAO,CAAC;gBACxBX,UAAU,CAAC,IAAI,CAAC;cACpB,CAAC,MACGY,MAAM,CAACC,KAAK,CAACH,IAAI,CAACC,OAAO,CAAC;YAClC,CAAC,MACI;cACDP,OAAO,CAACM,IAAI,CAAC;YACjB;UACJ;QACJ,CAAC,CAAC,CAACI,KAAK,CAAEH,OAAO,IAAK;UAClBI,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;UACpBZ,UAAU,CAAC,sBAAsB,CAAC;UAClCC,UAAU,CAAC,IAAI,CAAC;QACpB,CAAC,CAAC;QACN,OAAO,MAAM;UACTK,MAAM,GAAG,IAAI;QACjB,CAAC;MACL;IAEJ;EACJ,CAAC,EAAE,CAACR,GAAG,EAAEI,EAAE,EAAEH,GAAG,EAAEC,UAAU,EAAEC,UAAU,CAAC,CAAC;EAC1C,OAAO,CAACG,IAAI,EAAEC,OAAO,CAAC;AAC1B;AAACF,EAAA,CAtCuBP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}