{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Escritorio\\\\TrucoFront\\\\src\\\\TheaterTransition.js\",\n  _s = $RefreshSig$();\n// src/TheaterTransition.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport './TheaterTransition.css';\n// Import the sound file (adjust the relative path if needed)\nimport openSound from './static/audios/maderaAbriendose.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TheaterTransition({\n  children,\n  openWhen\n}) {\n  _s();\n  // Whether curtains are fully open or not\n  const [curtainsOpen, setCurtainsOpen] = useState(false);\n  // Create a ref to store the audio object so that it's not recreated on every render\n  const audioRef = useRef(null);\n  useEffect(() => {\n    if (!audioRef.current) {\n      audioRef.current = new Audio(openSound);\n    }\n  }, []);\n  useEffect(() => {\n    if (openWhen) {\n      // After a short delay, open the curtains and play the sound\n      const timer = setTimeout(() => {\n        setCurtainsOpen(true);\n        // Reset the audio (in case it was played before) and play\n        if (audioRef.current) {\n          audioRef.current.currentTime = 0;\n          audioRef.current.play();\n        }\n      }, 300); // adjust delay as needed\n      return () => clearTimeout(timer);\n    } else {\n      // If openWhen is false, keep the curtains closed\n      setCurtainsOpen(false);\n    }\n  }, [openWhen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"theater-container\",\n    children: [children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `curtains ${curtainsOpen ? 'open' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"curtain curtain-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"curtain curtain-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(TheaterTransition, \"/JumTTHMcV6SktN2wuJAoMfx0YE=\");\n_c = TheaterTransition;\nvar _c;\n$RefreshReg$(_c, \"TheaterTransition\");","map":{"version":3,"names":["React","useEffect","useRef","useState","openSound","jsxDEV","_jsxDEV","TheaterTransition","children","openWhen","_s","curtainsOpen","setCurtainsOpen","audioRef","current","Audio","timer","setTimeout","currentTime","play","clearTimeout","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/TheaterTransition.js"],"sourcesContent":["// src/TheaterTransition.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './TheaterTransition.css';\r\n// Import the sound file (adjust the relative path if needed)\r\nimport openSound from './static/audios/maderaAbriendose.mp3';\r\n\r\nexport default function TheaterTransition({ children, openWhen }) {\r\n  // Whether curtains are fully open or not\r\n  const [curtainsOpen, setCurtainsOpen] = useState(false);\r\n  // Create a ref to store the audio object so that it's not recreated on every render\r\n  const audioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!audioRef.current) {\r\n      audioRef.current = new Audio(openSound);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (openWhen) {\r\n      // After a short delay, open the curtains and play the sound\r\n      const timer = setTimeout(() => {\r\n        setCurtainsOpen(true);\r\n        // Reset the audio (in case it was played before) and play\r\n        if (audioRef.current) {\r\n          audioRef.current.currentTime = 0;\r\n          audioRef.current.play();\r\n        }\r\n      }, 300); // adjust delay as needed\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      // If openWhen is false, keep the curtains closed\r\n      setCurtainsOpen(false);\r\n    }\r\n  }, [openWhen]);\r\n\r\n  return (\r\n    <div className=\"theater-container\">\r\n      {/* The content we want to show (the loading screen, login, or child route) */}\r\n      {children}\r\n\r\n      {/* Our curtain overlay on top; it opens if curtainsOpen === true */}\r\n      <div className={`curtains ${curtainsOpen ? 'open' : ''}`}>\r\n        <div className=\"curtain curtain-left\" />\r\n        <div className=\"curtain curtain-right\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,yBAAyB;AAChC;AACA,OAAOC,SAAS,MAAM,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,eAAe,SAASC,iBAAiBA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChE;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACvD;EACA,MAAMU,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,QAAQ,CAACC,OAAO,EAAE;MACrBD,QAAQ,CAACC,OAAO,GAAG,IAAIC,KAAK,CAACX,SAAS,CAAC;IACzC;EACF,CAAC,EAAE,EAAE,CAAC;EAENH,SAAS,CAAC,MAAM;IACd,IAAIQ,QAAQ,EAAE;MACZ;MACA,MAAMO,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC7BL,eAAe,CAAC,IAAI,CAAC;QACrB;QACA,IAAIC,QAAQ,CAACC,OAAO,EAAE;UACpBD,QAAQ,CAACC,OAAO,CAACI,WAAW,GAAG,CAAC;UAChCL,QAAQ,CAACC,OAAO,CAACK,IAAI,CAAC,CAAC;QACzB;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACT,OAAO,MAAMC,YAAY,CAACJ,KAAK,CAAC;IAClC,CAAC,MAAM;MACL;MACAJ,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKe,SAAS,EAAC,mBAAmB;IAAAb,QAAA,GAE/BA,QAAQ,eAGTF,OAAA;MAAKe,SAAS,EAAE,YAAYV,YAAY,GAAG,MAAM,GAAG,EAAE,EAAG;MAAAH,QAAA,gBACvDF,OAAA;QAAKe,SAAS,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxCnB,OAAA;QAAKe,SAAS,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CA1CuBH,iBAAiB;AAAAmB,EAAA,GAAjBnB,iBAAiB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}