{"ast":null,"code":"import { Ast as AST, Parser } from 'apg-lite';\nimport Grammar from \"../../grammar.mjs\";\nimport cookieStringCallback from \"./callbacks/cookie-string.mjs\";\nimport cookiePairCallback from \"./callbacks/cookie-pair.mjs\";\nimport cookieNameCallback from \"./callbacks/cookie-name.mjs\";\nimport cookieValueCallback from \"./callbacks/cookie-value.mjs\";\nconst grammar = new Grammar();\nconst parse = (cookieString, {\n  strict = true\n} = {}) => {\n  const parser = new Parser();\n  parser.ast = new AST();\n  if (strict) {\n    parser.ast.callbacks['cookie-string'] = cookieStringCallback;\n    parser.ast.callbacks['cookie-pair'] = cookiePairCallback;\n    parser.ast.callbacks['cookie-name'] = cookieNameCallback;\n    parser.ast.callbacks['cookie-value'] = cookieValueCallback;\n  } else {\n    parser.ast.callbacks['lenient-cookie-string'] = cookieStringCallback;\n    parser.ast.callbacks['lenient-cookie-pair'] = cookiePairCallback;\n    parser.ast.callbacks['lenient-cookie-name'] = cookieNameCallback;\n    parser.ast.callbacks['lenient-cookie-value'] = cookieValueCallback;\n  }\n  const startRule = strict ? 'cookie-string' : 'lenient-cookie-string';\n  const result = parser.parse(grammar, startRule, cookieString);\n  return {\n    result,\n    ast: parser.ast\n  };\n};\nexport default parse;","map":{"version":3,"names":["Ast","AST","Parser","Grammar","cookieStringCallback","cookiePairCallback","cookieNameCallback","cookieValueCallback","grammar","parse","cookieString","strict","parser","ast","callbacks","startRule","result"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/node_modules/@swaggerexpert/cookie/es/cookie/parse/index.mjs"],"sourcesContent":["import { Ast as AST, Parser } from 'apg-lite';\nimport Grammar from \"../../grammar.mjs\";\nimport cookieStringCallback from \"./callbacks/cookie-string.mjs\";\nimport cookiePairCallback from \"./callbacks/cookie-pair.mjs\";\nimport cookieNameCallback from \"./callbacks/cookie-name.mjs\";\nimport cookieValueCallback from \"./callbacks/cookie-value.mjs\";\nconst grammar = new Grammar();\nconst parse = (cookieString, {\n  strict = true\n} = {}) => {\n  const parser = new Parser();\n  parser.ast = new AST();\n  if (strict) {\n    parser.ast.callbacks['cookie-string'] = cookieStringCallback;\n    parser.ast.callbacks['cookie-pair'] = cookiePairCallback;\n    parser.ast.callbacks['cookie-name'] = cookieNameCallback;\n    parser.ast.callbacks['cookie-value'] = cookieValueCallback;\n  } else {\n    parser.ast.callbacks['lenient-cookie-string'] = cookieStringCallback;\n    parser.ast.callbacks['lenient-cookie-pair'] = cookiePairCallback;\n    parser.ast.callbacks['lenient-cookie-name'] = cookieNameCallback;\n    parser.ast.callbacks['lenient-cookie-value'] = cookieValueCallback;\n  }\n  const startRule = strict ? 'cookie-string' : 'lenient-cookie-string';\n  const result = parser.parse(grammar, startRule, cookieString);\n  return {\n    result,\n    ast: parser.ast\n  };\n};\nexport default parse;"],"mappings":"AAAA,SAASA,GAAG,IAAIC,GAAG,EAAEC,MAAM,QAAQ,UAAU;AAC7C,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,oBAAoB,MAAM,+BAA+B;AAChE,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,OAAOC,kBAAkB,MAAM,6BAA6B;AAC5D,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,MAAMC,OAAO,GAAG,IAAIL,OAAO,CAAC,CAAC;AAC7B,MAAMM,KAAK,GAAGA,CAACC,YAAY,EAAE;EAC3BC,MAAM,GAAG;AACX,CAAC,GAAG,CAAC,CAAC,KAAK;EACT,MAAMC,MAAM,GAAG,IAAIV,MAAM,CAAC,CAAC;EAC3BU,MAAM,CAACC,GAAG,GAAG,IAAIZ,GAAG,CAAC,CAAC;EACtB,IAAIU,MAAM,EAAE;IACVC,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,eAAe,CAAC,GAAGV,oBAAoB;IAC5DQ,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,aAAa,CAAC,GAAGT,kBAAkB;IACxDO,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,aAAa,CAAC,GAAGR,kBAAkB;IACxDM,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,cAAc,CAAC,GAAGP,mBAAmB;EAC5D,CAAC,MAAM;IACLK,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,uBAAuB,CAAC,GAAGV,oBAAoB;IACpEQ,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,qBAAqB,CAAC,GAAGT,kBAAkB;IAChEO,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,qBAAqB,CAAC,GAAGR,kBAAkB;IAChEM,MAAM,CAACC,GAAG,CAACC,SAAS,CAAC,sBAAsB,CAAC,GAAGP,mBAAmB;EACpE;EACA,MAAMQ,SAAS,GAAGJ,MAAM,GAAG,eAAe,GAAG,uBAAuB;EACpE,MAAMK,MAAM,GAAGJ,MAAM,CAACH,KAAK,CAACD,OAAO,EAAEO,SAAS,EAAEL,YAAY,CAAC;EAC7D,OAAO;IACLM,MAAM;IACNH,GAAG,EAAED,MAAM,CAACC;EACd,CAAC;AACH,CAAC;AACD,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}