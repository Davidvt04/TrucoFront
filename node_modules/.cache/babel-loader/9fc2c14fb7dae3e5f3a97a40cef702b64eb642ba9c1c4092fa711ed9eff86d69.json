{"ast":null,"code":"import parse from \"./parse/index.mjs\";\nexport const isIdentical = (pathTemplate1, pathTemplate2) => {\n  if (typeof pathTemplate1 !== 'string') return false;\n  if (typeof pathTemplate2 !== 'string') return false;\n  const parseResult1 = parse(pathTemplate1);\n  const parseResult2 = parse(pathTemplate2);\n  const parts1 = [];\n  const parts2 = [];\n  if (!parseResult1.result.success) return false;\n  if (!parseResult2.result.success) return false;\n  parseResult1.ast.translate(parts1);\n  parseResult2.ast.translate(parts2);\n  if (parts1.length !== parts2.length) return false;\n  for (let i = 1; i < parts1.length; i++) {\n    const [type1, value1] = parts1[i];\n    const [type2, value2] = parts2[i];\n    if (type1 !== type2) return false;\n    if (type1 === 'template-expression' || type1 === 'template-expression-param-name') continue;\n    if (value1 !== value2) return false;\n  }\n  return true;\n};","map":{"version":3,"names":["parse","isIdentical","pathTemplate1","pathTemplate2","parseResult1","parseResult2","parts1","parts2","result","success","ast","translate","length","i","type1","value1","type2","value2"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/node_modules/openapi-path-templating/es/predicates.mjs"],"sourcesContent":["import parse from \"./parse/index.mjs\";\nexport const isIdentical = (pathTemplate1, pathTemplate2) => {\n  if (typeof pathTemplate1 !== 'string') return false;\n  if (typeof pathTemplate2 !== 'string') return false;\n  const parseResult1 = parse(pathTemplate1);\n  const parseResult2 = parse(pathTemplate2);\n  const parts1 = [];\n  const parts2 = [];\n  if (!parseResult1.result.success) return false;\n  if (!parseResult2.result.success) return false;\n  parseResult1.ast.translate(parts1);\n  parseResult2.ast.translate(parts2);\n  if (parts1.length !== parts2.length) return false;\n  for (let i = 1; i < parts1.length; i++) {\n    const [type1, value1] = parts1[i];\n    const [type2, value2] = parts2[i];\n    if (type1 !== type2) return false;\n    if (type1 === 'template-expression' || type1 === 'template-expression-param-name') continue;\n    if (value1 !== value2) return false;\n  }\n  return true;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,OAAO,MAAMC,WAAW,GAAGA,CAACC,aAAa,EAAEC,aAAa,KAAK;EAC3D,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE,OAAO,KAAK;EACnD,IAAI,OAAOC,aAAa,KAAK,QAAQ,EAAE,OAAO,KAAK;EACnD,MAAMC,YAAY,GAAGJ,KAAK,CAACE,aAAa,CAAC;EACzC,MAAMG,YAAY,GAAGL,KAAK,CAACG,aAAa,CAAC;EACzC,MAAMG,MAAM,GAAG,EAAE;EACjB,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAI,CAACH,YAAY,CAACI,MAAM,CAACC,OAAO,EAAE,OAAO,KAAK;EAC9C,IAAI,CAACJ,YAAY,CAACG,MAAM,CAACC,OAAO,EAAE,OAAO,KAAK;EAC9CL,YAAY,CAACM,GAAG,CAACC,SAAS,CAACL,MAAM,CAAC;EAClCD,YAAY,CAACK,GAAG,CAACC,SAAS,CAACJ,MAAM,CAAC;EAClC,IAAID,MAAM,CAACM,MAAM,KAAKL,MAAM,CAACK,MAAM,EAAE,OAAO,KAAK;EACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACM,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGT,MAAM,CAACO,CAAC,CAAC;IACjC,MAAM,CAACG,KAAK,EAAEC,MAAM,CAAC,GAAGV,MAAM,CAACM,CAAC,CAAC;IACjC,IAAIC,KAAK,KAAKE,KAAK,EAAE,OAAO,KAAK;IACjC,IAAIF,KAAK,KAAK,qBAAqB,IAAIA,KAAK,KAAK,gCAAgC,EAAE;IACnF,IAAIC,MAAM,KAAKE,MAAM,EAAE,OAAO,KAAK;EACrC;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}