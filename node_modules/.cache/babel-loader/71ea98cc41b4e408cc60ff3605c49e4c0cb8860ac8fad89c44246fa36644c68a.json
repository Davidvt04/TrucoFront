{"ast":null,"code":"import tokenService from \"../services/token.service\";\nimport getDeleteAlertsOrModal from \"./getDeleteAlertsOrModal\";\n\n/**\r\n * Function to delete an item from a list via a DELETE request and update the state accordingly.\r\n * This function also handles alerts and modals based on the server's response.\r\n *\r\n * @param {string} url - The URL to send the DELETE request to.\r\n * @param {string} id - The unique identifier of the item to be deleted.\r\n * @param {[Array, function]} state - An array containing the current state and the state setter function.\r\n * @param {[Array, function]} alerts - An array containing the current list of alerts and the state setter function for alerts.\r\n * @param {function} setMessage - A function to set the message for the modal in case of an error or success.\r\n * @param {function} setVisible - A function to control the visibility of the modal.\r\n * @param {object} [options={}] - Optional parameters:\r\n *   - `date` {Date}: If provided, only items created before this date will be deleted from the state.\r\n *   - `filtered` {Array}: An optional filtered list that needs to be updated in addition to the main state.\r\n *   - `setFiltered` {function}: A function to update the `filtered` state if applicable.\r\n *\r\n * @example\r\n * deleteFromList('/api/items/123', '123', [items, setItems], [alerts, setAlerts], setMessage, setVisible);\r\n */\n\nexport default function deleteFromList(url, id, [state, setState], [alerts, setAlerts], setMessage, setVisible, options = {}) {\n  const jwt = tokenService.getLocalAccessToken();\n  let confirmMessage = window.confirm(\"Are you sure you want to delete it?\");\n  if (confirmMessage) {\n    fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": `Bearer ${jwt}`,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.status === 200 || response.status == 204) {\n        if (options.date) setState(state.filter(i => i.id !== id && i.creationDate < options.date));else if (options.filtered && options.setFiltered) {\n          setState(state.filter(i => i.id !== id));\n          options.setFiltered(options.filtered.filter(i => i.id !== id));\n        } else setState(state.filter(i => i.id !== id));\n      }\n      return response.text();\n    }).then(text => {\n      if (text !== '') getDeleteAlertsOrModal(JSON.parse(text), id, alerts, setAlerts, setMessage, setVisible);\n    }).catch(err => {\n      console.log(err);\n      alert(\"Error deleting entity\");\n    });\n  }\n}","map":{"version":3,"names":["tokenService","getDeleteAlertsOrModal","deleteFromList","url","id","state","setState","alerts","setAlerts","setMessage","setVisible","options","jwt","getLocalAccessToken","confirmMessage","window","confirm","fetch","method","headers","Accept","then","response","status","date","filter","i","creationDate","filtered","setFiltered","text","JSON","parse","catch","err","console","log","alert"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/util/deleteFromList.js"],"sourcesContent":["import tokenService from \"../services/token.service\";\r\nimport getDeleteAlertsOrModal from \"./getDeleteAlertsOrModal\";\r\n\r\n\r\n/**\r\n * Function to delete an item from a list via a DELETE request and update the state accordingly.\r\n * This function also handles alerts and modals based on the server's response.\r\n *\r\n * @param {string} url - The URL to send the DELETE request to.\r\n * @param {string} id - The unique identifier of the item to be deleted.\r\n * @param {[Array, function]} state - An array containing the current state and the state setter function.\r\n * @param {[Array, function]} alerts - An array containing the current list of alerts and the state setter function for alerts.\r\n * @param {function} setMessage - A function to set the message for the modal in case of an error or success.\r\n * @param {function} setVisible - A function to control the visibility of the modal.\r\n * @param {object} [options={}] - Optional parameters:\r\n *   - `date` {Date}: If provided, only items created before this date will be deleted from the state.\r\n *   - `filtered` {Array}: An optional filtered list that needs to be updated in addition to the main state.\r\n *   - `setFiltered` {function}: A function to update the `filtered` state if applicable.\r\n *\r\n * @example\r\n * deleteFromList('/api/items/123', '123', [items, setItems], [alerts, setAlerts], setMessage, setVisible);\r\n */\r\n\r\nexport default function deleteFromList(url, id, [state, setState], [alerts, setAlerts], setMessage, setVisible, options = {}) {\r\n    const jwt = tokenService.getLocalAccessToken();\r\n    let confirmMessage = window.confirm(\"Are you sure you want to delete it?\");\r\n    if (confirmMessage) {\r\n        fetch(url, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${jwt}`,\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n            .then((response) => {\r\n                if (response.status === 200 || response.status==204) {\r\n                    if (options.date)\r\n                        setState(state.filter((i) => i.id !== id && i.creationDate < options.date));\r\n                    else if (options.filtered && options.setFiltered) {\r\n                        setState(state.filter((i) => i.id !== id));\r\n                        options.setFiltered(options.filtered.filter((i) => i.id !== id));\r\n                    }\r\n                    else\r\n                        setState(state.filter((i) => i.id !== id));\r\n                }\r\n                return response.text();\r\n            })\r\n            .then(text => {if(text!=='')\r\n                        getDeleteAlertsOrModal(JSON.parse(text), id, alerts, setAlerts, setMessage, setVisible);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                alert(\"Error deleting entity\")\r\n            });\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,OAAOC,sBAAsB,MAAM,0BAA0B;;AAG7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAcA,CAACC,GAAG,EAAEC,EAAE,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC,EAAE,CAACC,MAAM,EAAEC,SAAS,CAAC,EAAEC,UAAU,EAAEC,UAAU,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1H,MAAMC,GAAG,GAAGZ,YAAY,CAACa,mBAAmB,CAAC,CAAC;EAC9C,IAAIC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAAC,qCAAqC,CAAC;EAC1E,IAAIF,cAAc,EAAE;IAChBG,KAAK,CAACd,GAAG,EAAE;MACPe,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUP,GAAG,EAAE;QAChCQ,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CACGC,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAE,GAAG,EAAE;QACjD,IAAIZ,OAAO,CAACa,IAAI,EACZlB,QAAQ,CAACD,KAAK,CAACoB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKA,EAAE,IAAIsB,CAAC,CAACC,YAAY,GAAGhB,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC,KAC3E,IAAIb,OAAO,CAACiB,QAAQ,IAAIjB,OAAO,CAACkB,WAAW,EAAE;UAC9CvB,QAAQ,CAACD,KAAK,CAACoB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKA,EAAE,CAAC,CAAC;UAC1CO,OAAO,CAACkB,WAAW,CAAClB,OAAO,CAACiB,QAAQ,CAACH,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKA,EAAE,CAAC,CAAC;QACpE,CAAC,MAEGE,QAAQ,CAACD,KAAK,CAACoB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKA,EAAE,CAAC,CAAC;MAClD;MACA,OAAOkB,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDT,IAAI,CAACS,IAAI,IAAI;MAAC,IAAGA,IAAI,KAAG,EAAE,EACf7B,sBAAsB,CAAC8B,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,EAAE1B,EAAE,EAAEG,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,CAAC;IACnG,CAAC,CAAC,CACDuB,KAAK,CAAEC,GAAG,IAAK;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBG,KAAK,CAAC,uBAAuB,CAAC;IAClC,CAAC,CAAC;EACV;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}