{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\OneDrive\\\\Escritorio\\\\TrucoFront\\\\src\\\\util\\\\getDeleteAlertsOrModal.js\";\nimport { Alert } from \"reactstrap\";\n\n/**\r\n * Helper function to dismiss an alert by its ID.\r\n *\r\n * @param {Array} alerts - The current list of alerts being displayed.\r\n * @param {string} id - The unique identifier of the alert to be dismissed.\r\n * @param {function} setAlerts - A function to update the list of alerts by removing the dismissed alert.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction dismiss(alerts, id, setAlerts) {\n  setAlerts(alerts.filter(i => i.id !== id));\n}\n\n/**\r\n * Function to handle the display of alerts or modals based on a server response.\r\n * If the response contains a status code, it displays a modal with a message.\r\n * Otherwise, it adds a dismissible alert to the list of alerts.\r\n *\r\n * @param {object} json - The JSON response object from the server. It may contain a status code and message.\r\n * @param {string} id - A unique identifier for the alert.\r\n * @param {Array} alerts - The current list of alerts being displayed.\r\n * @param {function} setAlerts - A function to update the list of alerts.\r\n * @param {function} setMessage - A function to set the message for the modal.\r\n * @param {function} setVisible - A function to control the visibility of the modal.\r\n *\r\n * @example\r\n * getDeleteAlertsOrModal(responseJson, \"123\", currentAlerts, setCurrentAlerts, setModalMessage, setModalVisible);\r\n */\n\nexport default function getDeleteAlertsOrModal(json, id, alerts, setAlerts, setMessage, setVisible) {\n  if (json.statusCode) {\n    setMessage(json.message);\n    setVisible(true);\n  } else {\n    const alertId = `alert-${id}`;\n    setAlerts([...alerts, {\n      alert: /*#__PURE__*/_jsxDEV(Alert, {\n        toggle: () => dismiss(alerts, alertId, setAlerts),\n        id: alertId,\n        color: \"info\",\n        children: json.message\n      }, \"alert-\" + id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }, this),\n      id: alertId\n    }]);\n  }\n}","map":{"version":3,"names":["Alert","jsxDEV","_jsxDEV","dismiss","alerts","id","setAlerts","filter","i","getDeleteAlertsOrModal","json","setMessage","setVisible","statusCode","message","alertId","alert","toggle","color","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/david/OneDrive/Escritorio/TrucoFront/src/util/getDeleteAlertsOrModal.js"],"sourcesContent":["import { Alert } from \"reactstrap\";\r\n\r\n\r\n/**\r\n * Helper function to dismiss an alert by its ID.\r\n *\r\n * @param {Array} alerts - The current list of alerts being displayed.\r\n * @param {string} id - The unique identifier of the alert to be dismissed.\r\n * @param {function} setAlerts - A function to update the list of alerts by removing the dismissed alert.\r\n */\r\nfunction dismiss(alerts, id, setAlerts) {\r\n    setAlerts(alerts.filter(i => i.id !== id))\r\n}\r\n\r\n/**\r\n * Function to handle the display of alerts or modals based on a server response.\r\n * If the response contains a status code, it displays a modal with a message.\r\n * Otherwise, it adds a dismissible alert to the list of alerts.\r\n *\r\n * @param {object} json - The JSON response object from the server. It may contain a status code and message.\r\n * @param {string} id - A unique identifier for the alert.\r\n * @param {Array} alerts - The current list of alerts being displayed.\r\n * @param {function} setAlerts - A function to update the list of alerts.\r\n * @param {function} setMessage - A function to set the message for the modal.\r\n * @param {function} setVisible - A function to control the visibility of the modal.\r\n *\r\n * @example\r\n * getDeleteAlertsOrModal(responseJson, \"123\", currentAlerts, setCurrentAlerts, setModalMessage, setModalVisible);\r\n */\r\n\r\nexport default function getDeleteAlertsOrModal(json, id, alerts, setAlerts, setMessage, setVisible) {\r\n    if (json.statusCode) {\r\n        setMessage(json.message);\r\n        setVisible(true);\r\n    }\r\n    else {\r\n        const alertId = `alert-${id}`\r\n        setAlerts([\r\n            ...alerts,\r\n            {\r\n                alert: <Alert toggle={() => dismiss(alerts, alertId, setAlerts)} key={\"alert-\" + id} id={alertId} color=\"info\">\r\n                    {json.message}\r\n                </Alert>,\r\n                id: alertId\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,YAAY;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,SAASC,OAAOA,CAACC,MAAM,EAAEC,EAAE,EAAEC,SAAS,EAAE;EACpCA,SAAS,CAACF,MAAM,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASI,sBAAsBA,CAACC,IAAI,EAAEL,EAAE,EAAED,MAAM,EAAEE,SAAS,EAAEK,UAAU,EAAEC,UAAU,EAAE;EAChG,IAAIF,IAAI,CAACG,UAAU,EAAE;IACjBF,UAAU,CAACD,IAAI,CAACI,OAAO,CAAC;IACxBF,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC,MACI;IACD,MAAMG,OAAO,GAAG,SAASV,EAAE,EAAE;IAC7BC,SAAS,CAAC,CACN,GAAGF,MAAM,EACT;MACIY,KAAK,eAAEd,OAAA,CAACF,KAAK;QAACiB,MAAM,EAAEA,CAAA,KAAMd,OAAO,CAACC,MAAM,EAAEW,OAAO,EAAET,SAAS,CAAE;QAAqBD,EAAE,EAAEU,OAAQ;QAACG,KAAK,EAAC,MAAM;QAAAC,QAAA,EACzGT,IAAI,CAACI;MAAO,GADqD,QAAQ,GAAGT,EAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE5E,CAAC;MACRlB,EAAE,EAAEU;IACR,CAAC,CACJ,CAAC;EACN;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}